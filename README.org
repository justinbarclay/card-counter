#+OPTIONS: toc:nil
* card-counter
A CLI for quickly summarizing story points in Trello lists.

#+BEGIN_EXAMPLE
Card Counter 0.5.0-beta3
Justin Barclay <justincbarclay@gmail.com>
A CLI for quickly summarizing story points in Trello lists

USAGE:
    card-counter [FLAGS] [OPTIONS] [SUBCOMMAND]

FLAGS:
    -c, --compare    Compares the current Trello board with a previous entry
    -h, --help       Prints help information
    -V, --version    Prints version information

OPTIONS:
    -b, --board-id <ID>          The ID of the board where the cards are meant to be counted from
    -d, --database <DATABASE>    Choose the database you want to save current request in [default: local]  [possible
                                 values: local, aws]
    -f, --filter <FILTER>        Filters out all lists with a name that contains the substring FILTER
    -s, --save <SAVE>            Save the current entry in the database [default: true]

SUBCOMMANDS:
    config    Edit properties associated with card-counter
    help      Prints this message or the help of the given subcommand(s)
#+END_EXAMPLE
** Getting Started for Getting Started
Before you can even think about getting started, you will need a Trello account. If you don't have a Trello account, [[https://trello.com/signup][go get one]]. Use it for a while. But not just use it, breathe it, live it, feel it deep down in your meat covered bones. Once your entire being is permeated with Trello, you are ready to start tracking the progress you make in [[https://www.atlassian.com/agile/scrum/sprints][sprints]].

Finally, you've got a Trello account and you've created some boards. Within those boards, you've created stacks of lists of cards. And within each card, you've scoped out the work and given it a [[https://en.wikipedia.org/wiki/Fibonacci_scale_(agile)][score]].

Great! You've got the theory down. I decree that you are an official agile scrum master. I even made a certificate for you.
#+attr_html: :width 500px
#+attr_latex: :width 500px
#+attr_markdown: :witdh 500px
[[./images/certificate_of_mastery.png]]

Finally, finally, we're ready to get started.
** Getting Started
You can begin thinking about getting started with ~card-counter~ now. But before you can begin thinking about card-counter itself, however, you will need to take some steps to retrieve and save information from Trello:

1. Get your [[https://trello.com/app-key][API key]]
2. Generate a Trello API token by going to ~https://trello.com/1/authorize?expiration=1day&name=card-counter&scope=read&response_type=token&key=<your-key-here>~
3. Save these:
   - As an environment variable:
   #+BEGIN_SRC bash
     export TRELLO_API_KEY=<your API key>
     export TRELLO_API_TOKEN=<your API token>
   #+END_SRC
   - Or in the config file:
   #+BEGIN_SRC bash
     card-counter config
   #+END_SRC

There! We're done thinking about getting started. card-counter now knows enough about you to start talking to the Trello API. 

If you're curious about what information card-counter stores, you can find the config file and local database in ~$HOME/.card-counter/~. If you have privacy concerns about what card-counter is doing with your information, don't worry about it. card-counter pulls down your information from the Trello API, processes it, and stores it all locally on your machine.
** Setting up Trello
*** What's the point?
Now that you understand the theory, we are ready to set up our boards to be processed by card-counter. Luckily, preparing your board for card-counter is simple. Just put in some numbers and you are set. Ok, it's not quite that simple but it's close. 

card-counter tracks the estimated and actual effort a card has taken. It does this by using numbers encapsulated in square brackets -- ~[]~ -- and others in parentheses -- ~()~ -- placed in the card's title. If the title only has a number in parentheses, it acts as both the "actual" and "estimated" effort. However, when numbers in square brackets and parentheses are in a title, the number in the square brackets will act as the "actual" effort taken and the number in the parentheses will act as the "estimated" effort. In short, numbers in square brackets are only counted as corrective numbers.

It's hard to see what this means so let's walk through an example:

Sally has a list, "This Sprint", which has a singled card titled "Write docs for card-counter". They have done their homework and they know that card-counter docs are lacking. So they think this is going to be 2 for effort, whatever 2 means. Sally updates the card's name to "Write docs for card-counter (2)".
If Sally ran ~card-counter~, it would report:


| List        | Cards | Score | Estimated | Unscored |
|-------------+-------+-------+-----------+---------|
| This Sprint |     1 |     2 |         2 |       0 |


Now, through completing the task Sally had learned that card-counter's docs were in a much graver state than she had estimated. So, she updates the card's title: "(2)[4] Write docs for card-counter".

Now, if Sally ran ~card-counter~, it would report:

| List        | Cards | Score | Estimated | Unscored |
|-------------+-------+-------+-----------+----------|
| This Sprint |     1 |     4 |         2 |        0 |

*** Burn it all down
If you have a boss, then you know how much they like images. Images are great because they are easy to grasp and they have pretty colours. card-counter can help produce [[https://en.wikipedia.org/wiki/Burn_down_chart][burn down charts]] for you. You need to do two things to facilitate this process. One, have a board that is named "Done" or has "Done" somewhere in the name. Two, run ~card-counter~ regularly to produce a reasonable amount of data for that board (I recommend daily). 

** CLI Examples
When you first run ~card-counter~ on a new machine, you can run the config command. This allows card-counter to capture important pieces of information, like how to access your Trello data and your preferred database.
#+BEGIN_SRC bash
card-counter config
#+END_SRC

After that, you can run the command itself.
#+BEGIN_SRC bash
card-counter 
#+END_SRC
This will bring up a list of boards you have access to and get you to choose what board you want to run the command on.

If you know that you are going be to running card-counter on the same board all the time, you can use the ~-b~ (~--board-id~) option and set the ~board-id~. You can find the board-id in the URL for your board.

A typical Trello board URL looks like:
~https://trello.com/b/<board-id>/<your-board>~

For example: if you want to use the Trello board-id for card-counter, https://trello.com/b/wtPNQDEV/card-counter, you would use "wtPNQDEV" as the board-id.
#+BEGIN_SRC bash
card-counter --board-id wtPNQDEV 
#+END_SRC

If you have a board that is a little noisy, you can filter out lists that you don't want to track. You can do this by using the ~-f~ (~--filter~) option. If you add a substring to the list(s), such as [ignore], card-counter can filter out these lists for you. Be careful however, the filter option is case sensitive.
#+BEGIN_SRC bash
card-counter --board-id wtPNQDEV --filter ignore
#+END_SRC

If you'd like to generate a burndown chart for your boss or because you like graphs, there is the ~burndown~ command. It will output comma separated values that you can feed to your graphing library of choice. For this example we'll have gnuplot generate a graph for us.

First, we'll need to set-up a [[http://www.gnuplot.info/documentation.html][gnuplot]] script to parse the data for us. Save the following example in a file titled "burndown.gp".
#+NAME: burndown.gp
#+BEGIN_EXAMPLE
set datafile separator ','
set xdata time
set timefmt '%d-%m-%y'
set format x "%d %b"
set autoscale x
plot for[col=2:3] "burndown.csv" u 1:col title columnheader(col) with lines
#+END_EXAMPLE

The ~burndown~ command requires ~-s~ (~--start~) and ~-e~ (~--end~) options to run. They represent the start and end dates you wish to generate the burndown chart for. These dates are formatted as the string "day-month-year" for example: "14-04-2020". Additionally, we'll pass in filter and board-id options. We'll save the output to a file and tell gnuplot to process it for us.
#+BEGIN_SRC bash
card-counter burndown --board-id wtPNQDEV --start 01-04-2020 --end 14-04-2020 -f NoBurn > burndown.csv && gnuplot burndown.gp -p
#+END_SRC

[[./images/burndown.png]]
** "Advanced"
Are you forced to collaborate with others? Weirder yet, do you like to collaborate with others? Or do you just demand that everything needs to be in the cloud? If any 3 of those are correct, but especially if ALL of them are, I have the solution for you. It's card-counter cloud edition! Where we allow you to store your data in DynamoDB.
*** AWS DynamoDB
To start with you'll need to ask your administrator to give you read/write access to DynamoDB. This process can take anywhere from 3 weeks to 4 months.

**** Authentication
Did you return with the correct AWS permissions? That's great! I'm assuming in the interceding 3 months that you've become familiar with the AWS CLI. If so, this suggests your credentials are set somewhere. You probably don't need to do anything. If you have rushed into this, and it is your first time using AWS, you can start reading [[https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html][Amazon's documentation]] to find out what you need to set.

card-counter will check several locations for your AWS credentials and Region.

In order, the locations are:
1. Environment Variables
2. Credential Files
3. IAM ECS Container Profile
4. IAM EC2 Instance Profile

**** Configuring
You can tell card-counter you want to use AWS as your database (instead of the local database) in two ways:

1. As an option through the CLI
  #+BEGIN_SRC bash
  card-counter --database aws
  #+END_SRC
2. Select the ~aws~ option in your config file
  #+BEGIN_SRC bash
  card-counter config
  #+END_SRC

**** DynamoDB Table
For those of you who want to avoid doing as much work as possible, card-counter can create the necessary table in DynamoDB for you. When you run ~card-counter~ for the first time, with AWS as your database, it will ask for permission to create the "card-counter" table.

If you're a control freak (or worse yet, if you like config files everywhere), you can manage the database yourself. I've provided the ~terraform~ below to help you create the "card-counter" table.
#+NAME: DynamoDB config
#+BEGIN_SRC terraform
resource "aws_dynamodb_table" "card-counter-table" {
  name           = "card-counter"
  billing_mode   = "PROVISIONED"
  read_capacity  = 1
  write_capacity = 1
  hash_key       = "board_id"
  range_key      = "time_stamp"

  attribute {
    name = "board_id"
    type = "S"
  }

  attribute {
    name = "time_stamp"
    type = "N"
  }

  tags = {
    Name        = "dynamodb-table-1"
    Environment = "production"
  }
}
#+END_SRC
 
** Build from source
Don't trust the binaries I provided? I have an easy solution for you. Build it from source. (Easy if you already have rust and cargo installed)

#+BEGIN_SRC bash
git clone https://github.com/justinbarclay/card-counter.git
cd card-counter
cargo install --path .
#+END_SRC

_Fin_, finally.

