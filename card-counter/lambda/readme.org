* Burndown lambda
Maybe you want to allow anyone to generate burndown. And maybe by anyone you mean your team members in slack. I've hacked together an example of how to do just such a thing.

Once you've set up the s3 bucket (outlined in the terraform folder), and once you've deployed the lambda (outlined in ~template.yaml~), and once you've made a new SlackBot and configured it to hit the ApiGateway endpoint for the lambda. You can have you teammates generate a Burndown chart simply by invoking the card-counter command[fn:1]:
#+begin_example
/card-counter from YYYY-MM-DD to YYYY-MM-DD for <board-id>
#+end_example

Once a command is sent to the lambda it will:
1. Validate it and give the user a helpful prompt if it is invalid
2. Validate the board id and query DynamoDb
3. Generate an SVG chart and upload it to the S3 bucket
4. Send back a link to the S3 bucket with a query param for the date range of the chart
5. When the user navigates to the html it will use this query param to try to load the image from the s3 bucket

[fn:1]Of course, you don't have to call your command card-counter, you could probably call it burndown. But I am a narcissist, so I named it after my creation.


** Setup
#+begin_quote
Buyer beware, I've written this system as a proof of concept so if you want it hardened or don't want information to leak there is a lot more authentication you'll want to do.

This setup also explicitly supports DynamoDB and Trello as it's storage engine and kanban system.
#+end_quote

1. Create an S3 bucket that can host a static website.
   - I've created an example S3 bucket config using terraform in the terraform folder.
   - Once you've created the S3 bucket you'll need to upload ~index.html~ and ~main.js~ to the root of the bucket
   - You could copy the files by using the aws-cli:
     #+begin_src shell
     aws s3 cp terraform/index.html s3://<your-bucket>
     aws s3 cp terraform/index.html s3://<your-bucket>
     #+end_src


2. Deploy the lambda function using ~aws sam~.
   - If you set this up as a slack slash command, be warned - this does no authentication.
   - Read the ~template.yaml~ file, because I set all the permissions up for ease of deployment :)
   - You will need to set environment variables for Trello and state you bucket name.
     #+NAME: template.yaml
     #+DESCRIPTION: Portions of a template.yaml file highlight the values you need to configure.
     #+begin_src yaml
           Environment:
             Variables:
               TRELLO_API_KEY: <your-key>
               TRELLO_API_TOKEN: <your-token>
               BUCKET_NAME: <your-bucket-here>
     ...
             - S3CrudPolicy:
                 BucketName: <your-bucket-here>
     #+end_src

3. Setup a [[https://api.slack.com/interactivity/slash-commands][slack slash]] command to call the URL setup with ApiGateway
